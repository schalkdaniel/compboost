% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LearnerClassifCompboost.R
\name{mlr_learners_classif.compboost}
\alias{mlr_learners_classif.compboost}
\alias{LearnerClassifCompboost}
\title{Component-wise Boosting}
\description{
A [mlr3::LearnerClassif] for a compbonent-wise boosting model implemented in
[Compboost] in package \CRANpkg{compboost}.
}
\section{Dictionary}{

This \link[mlr3:Learner]{mlr3::Learner} can be instantiated via the \link[mlr3misc:Dictionary]{dictionary} \link[mlr3:mlr_learners]{mlr3::mlr_learners} or with the associated sugar function \code{\link[mlr3:mlr_sugar]{mlr3::lrn()}}:\preformatted{mlr_learners$get("classif.compboost")
lrn("classif.compboost")
}
}

\section{Meta Information}{

\itemize{
\item Task type: \dQuote{classif}
\item Predict Types: \dQuote{response}, \dQuote{prob}
\item Feature Types: \dQuote{numeric}, \dQuote{factor}, \dQuote{integer}, \dQuote{character}
\item Required Packages: \CRANpkg{mlr3}, \CRANpkg{compboost}
}
}

\section{Parameters}{
\tabular{lllll}{
   Id \tab Type \tab Default \tab Range \tab Levels \cr
   iterations \tab integer \tab 100 \tab \eqn{[1, \infty)}{[1, Inf)} \tab - \cr
   learning_rate \tab numeric \tab 0.05 \tab \eqn{[0, \infty)}{[0, Inf)} \tab - \cr
   df \tab numeric \tab 5 \tab \eqn{[1, \infty)}{[1, Inf)} \tab - \cr
   df_cat \tab numeric \tab 1 \tab \eqn{[1, \infty)}{[1, Inf)} \tab - \cr
   n_knots \tab numeric \tab 20 \tab \eqn{[4, \infty)}{[4, Inf)} \tab - \cr
   df_autoselect \tab logical \tab TRUE \tab - \tab TRUE, FALSE \cr
   ncores \tab integer \tab 1 \tab \eqn{[1, 8]}{[1, 8]} \tab - \cr
   oob_fraction \tab numeric \tab 0 \tab \eqn{[0, 0.9]}{[0, 0.9]} \tab - \cr
   use_stopper \tab logical \tab FALSE \tab - \tab TRUE, FALSE \cr
   just_log \tab logical \tab TRUE \tab - \tab TRUE, FALSE \cr
   use_stopper_auc \tab logical \tab FALSE \tab - \tab TRUE, FALSE \cr
   just_log_auc \tab logical \tab TRUE \tab - \tab TRUE, FALSE \cr
   patience \tab integer \tab 10 \tab \eqn{[1, \infty)}{[1, Inf)} \tab - \cr
   eps_for_break \tab numeric \tab 0.00001 \tab \eqn{(-\infty, \infty)}{(-Inf, Inf)} \tab - \cr
   momentum \tab numeric \tab 0 \tab \eqn{[0, \infty)}{[0, Inf)} \tab - \cr
   bin_method \tab character \tab linear \tab - \tab linear, quantile \cr
   bin_root \tab numeric \tab 0 \tab \eqn{[0, 4]}{[0, 4]} \tab - \cr
   show_output \tab logical \tab FALSE \tab - \tab TRUE, FALSE \cr
   oob_seed \tab integer \tab 833388 \tab \eqn{[1, \infty)}{[1, Inf)} \tab - \cr
   additional_auc_task \tab list \tab NULL \tab - \tab - \cr
}
}

\seealso{
* Chapter in the [mlr3book](https://mlr3book.mlr-org.com/):
  \url{https://mlr3book.mlr-org.com/basics.html#learners}
* Package \CRANpkg{mlr3learners} for a solid collection of essential learners.
* Package [mlr3extralearners](https://github.com/mlr-org/mlr3extralearners) for more learners.
* [Dictionary][mlr3misc::Dictionary] of [Learners][mlr3::Learner]: [mlr3::mlr_learners]
* `as.data.table(mlr_learners)` for a table of available [Learners][mlr3::Learner] in the running session (depending on the loaded packages).
* \CRANpkg{mlr3pipelines} to combine learners with pre- and postprocessing steps.
* Package \CRANpkg{mlr3viz} for some generic visualizations.
* Extension packages for additional task types:
   * \CRANpkg{mlr3proba} for probabilistic supervised regression and survival analysis.
   * \CRANpkg{mlr3cluster} for unsupervised clustering.
* \CRANpkg{mlr3tuning} for tuning of hyperparameters, \CRANpkg{mlr3tuningspaces}
  for established default tuning spaces.
}
\concept{Learner}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3:LearnerClassif]{mlr3::LearnerClassif}} -> \code{LearnerClassifCompboost}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{transition}}{(`integer(1)`)\cr
Transition value when the model stops.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{LearnerClassifCompboost$new()}}
\item \href{#method-setToIteration}{\code{LearnerClassifCompboost$setToIteration()}}
\item \href{#method-clone}{\code{LearnerClassifCompboost$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner">}\href{../../mlr3/html/Learner.html#method-base_learner}{\code{mlr3::Learner$base_learner()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format">}\href{../../mlr3/html/Learner.html#method-format}{\code{mlr3::Learner$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help">}\href{../../mlr3/html/Learner.html#method-help}{\code{mlr3::Learner$help()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict">}\href{../../mlr3/html/Learner.html#method-predict}{\code{mlr3::Learner$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata">}\href{../../mlr3/html/Learner.html#method-predict_newdata}{\code{mlr3::Learner$predict_newdata()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print">}\href{../../mlr3/html/Learner.html#method-print}{\code{mlr3::Learner$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset">}\href{../../mlr3/html/Learner.html#method-reset}{\code{mlr3::Learner$reset()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train">}\href{../../mlr3/html/Learner.html#method-train}{\code{mlr3::Learner$train()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a [LearnerClassifCompboost] object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifCompboost$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setToIteration"></a>}}
\if{latex}{\out{\hypertarget{method-setToIteration}{}}}
\subsection{Method \code{setToIteration()}}{
Wrapper for the internal train method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifCompboost$setToIteration(iter)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{iter}}{New iteration}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifCompboost$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
