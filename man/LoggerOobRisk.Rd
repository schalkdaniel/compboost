% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{LoggerOobRisk}
\alias{LoggerOobRisk}
\title{Log the validation/test/out-of-bag risk}
\format{
\link{S4} object.
}
\arguments{
\item{logger_id}{(\code{character(1)})\cr
Identifier of the logger.}

\item{use_as_stopper}{(\code{logical(1)})\cr
Boolean to indicate if the logger should also be used as a stopper.}

\item{loss}{(\link{LossQuadratic} | \link{LossBinomial} | \link{LossHuber} | \link{LossAbsolute} | \link{LossQuantile})\cr
An initialized \code{S4} loss object (requires to call \verb{Loss*$new(...)}).
See the respective help page for further information.}

\item{eps_for_break}{(\code{numeric(1)})\cr
This argument is used if the loss is also used as stopper. If the relative
improvement of the logged inbag risk falls above this boundary the stopper
returns \code{TRUE}.}

\item{patience}{(\code{integer(1)})\cr
The number of consecutive conditions that must be true to return
a stop signal.}

\item{oob_data}{(\code{list()})\cr
A list which contains data source objects which corresponds to the
source data of each registered factory. The source data objects should
contain the out of bag data. This data is then used to calculate the
prediction in each step.}

\item{oob_response}{(\link{ResponseRegr} | \link{ResponseBinaryClassif})\cr
The response object used for the predictions on the validation data.}
}
\description{
This class logs the out of bag risk for a specific loss function.
}
\section{Usage}{

\preformatted{
LoggerOobRisk$new(logger_id, use_as_stopper, loss, eps_for_break,
  patience, oob_data, oob_response)
}
}

\section{Details}{

This logger computes the risk for a given new dataset
\eqn{\mathcal{D}_\mathrm{oob} = \{(x^{(i)},\ y^{(i)})\ |\ i \in I_\mathrm{oob}\}}
and stores it into a vector. The OOB risk \eqn{\mathcal{R}_\mathrm{oob}} for
iteration \eqn{m} is calculated by:
\deqn{
  \mathcal{R}_\mathrm{oob}^{[m]} = \frac{1}{|\mathcal{D}_\mathrm{oob}|}\sum\limits_{(x,y) \in \mathcal{D}_\mathrm{oob}}
  L(y, \hat{f}^{[m]}(x))
}
\strong{Note:}
\itemize{
\item If \eqn{m=0} than \eqn{\hat{f}} is just the offset.
\item The implementation to calculate \eqn{\mathcal{R}_\mathrm{emp}^{[m]}} is done in two steps:
\enumerate{
\item Calculate vector \code{risk_temp} of losses for every observation for
given response \eqn{y^{(i)}} and prediction \eqn{\hat{f}^{[m]}(x^{(i)})}.
\item Average over \code{risk_temp}.
}

This procedure ensures, that it is possible to e.g. use the AUC or any
arbitrary performance measure for risk logging. This gives just one
value for \eqn{risk_temp} and therefore the average equals the loss
function. If this is just a value (like for the AUC) then the value is
returned.
}
}

\section{Fields}{

This class doesn't contain public fields.
}

\section{Methods}{

\itemize{
\item \verb{$summarizeLogger()}: \verb{() -> ()}
}
}

\examples{
# Define data:
X1 = cbind(1:10)
X2 = cbind(10:1)
data_source1 = InMemoryData$new(X1, "x1")
data_source2 = InMemoryData$new(X2, "x2")

oob_list = list(data_source1, data_source2)

set.seed(123)
y_oob = rnorm(10)

# Used loss:
log_bin = LossBinomial$new()

# Define response object of oob data:
oob_response = ResponseRegr$new("oob_response", as.matrix(y_oob))

# Define logger:
log_oob_risk = LoggerOobRisk$new("oob", FALSE, log_bin, 0.05, 5, oob_list, oob_response)

# Summarize logger:
log_oob_risk$summarizeLogger()

}
