% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{LoggerInbagRisk}
\alias{LoggerInbagRisk}
\title{Log the train risk.}
\format{
\link{S4} object.
}
\arguments{
\item{logger_id}{(\code{character(1)})\cr
Identifier of the logger.}

\item{use_as_stopper}{(\code{logical(1)})\cr
Boolean to indicate if the logger should also be used as a stopper.}

\item{loss}{(\link{LossQuadratic} | \link{LossBinomial} | \link{LossHuber} | \link{LossAbsolute} | \link{LossQuantile})\cr
An initialized \code{S4} loss object (requires to call \verb{Loss*$new(...)}).
See the respective help page for further information.}

\item{eps_for_break}{(\code{numeric(1)})\cr
This argument becomes active if the loss is also used as stopper. If the relative
improvement of the logged inbag risk falls above this boundary the stopper
returns \code{TRUE}.}

\item{patience}{(\code{integer(1)})\cr
The number of consecutive conditions that must be true to return
a stop signal.}
}
\description{
This class logs the train risk for a specific loss function.
}
\section{Usage}{

\preformatted{
LoggerInbagRisk$new(logger_id, use_as_stopper, loss, eps_for_break, patience)
}
}

\section{Details}{

This logger computes the risk for the training data
\eqn{\mathcal{D} = \{(x^{(i)},\ y^{(i)})\ |\ i \in \{1, \dots, n\}\}}
and stores it into a vector. The empirical risk \eqn{\mathcal{R}_\mathrm{emp}} for
iteration \eqn{m} is calculated by:
\deqn{
  \mathcal{R}_\mathrm{emp}^{[m]} = \frac{1}{n}\sum\limits_{i = 1}^n L(y^{(i)}, \hat{f}^{[m]}(x^{(i)}))
}
\strong{Note:}
\itemize{
\item If \eqn{m=0} than \eqn{\hat{f}} is just the offset.
\item The implementation to calculate \eqn{\mathcal{R}_\mathrm{emp}^{[m]}} is done in two steps:
\enumerate{
\item Calculate vector \code{risk_temp} of losses for every observation for
given response \eqn{y^{(i)}} and prediction \eqn{\hat{f}^{[m]}(x^{(i)})}.
\item Average over \code{risk_temp}.
}

This procedure ensures, that it is possible to e.g. use the AUC or any
arbitrary performance measure for risk logging. This gives just one
value for \code{risk_temp} and therefore the average equals the loss
function. If this is just a value (like for the AUC) then the value is
returned.
}
}

\section{Fields}{

This class doesn't contain public fields.
}

\section{Methods}{

\itemize{
\item \verb{$summarizeLogger()}: \verb{() -> ()}
}
}

\examples{
# Used loss:
log_bin = LossBinomial$new()

# Define logger:
log_inbag_risk = LoggerInbagRisk$new("inbag", FALSE, log_bin, 0.05, 5)

# Summarize logger:
log_inbag_risk$summarizeLogger()

}
