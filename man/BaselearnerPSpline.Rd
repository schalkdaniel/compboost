% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{BaselearnerPSpline}
\alias{BaselearnerPSpline}
\title{Base-learner factory to do non-parametric B or P-spline regression}
\format{
\code{\link{S4}} object.
}
\description{
\code{BaselearnerPSpline} creates a spline base-learner factory
 object which can be registered within a base-learner list and then used
 for training.
}
\section{Usage}{

\preformatted{
baselearnerpspline$new(data_source, data_target, list(degree, n_knots, penalty,
  differences))
}
}

\section{arguments}{

\describe{
\item{\code{data_source} [\code{data} object]}{
  data object which contains the source data.
}
\item{\code{data_target} [\code{data} object]}{
  data object which gets the transformed source data.
}
\item{\code{degree} [\code{integer(1)}]}{
  degree of the spline functions to interpolate the knots.
}
\item{\code{n_knots} [\code{integer(1)}]}{
  number of \strong{inner knots}. to prevent weird behavior on the edges
  the inner knots are expanded by \eqn{\mathrm{degree} - 1} additional knots.
}
\item{\code{penalty} [\code{numeric(1)}]}{
  positive numeric value to specify the penalty parameter. setting the
  penalty to 0 ordinary b-splines are used for the fitting.
}
\item{\code{differences} [\code{integer(1)}]}{
  the number of differences which are penalized. a higher value leads to
  smoother curves.
}
\item{\code{use_binning} [\code{logical(1)}]}{
  Indicator if feature should be discretized first (default is \code{FALSE}).
}
}
}

\section{Details}{

  If \code{use_binning = TRUE} the original feature is discretized to on an equidistant grid on
  \eqn{[\min(x),\max(x)]} with \eqn{\sqrt{n}} points. The fitting is then done by
  using weights per new data point.
}

\section{Fields}{

  This class doesn't contain public fields.
}

\section{Methods}{

\describe{
\item{\code{getData()}}{Get the data matrix of the target data which is used
  for modeling.}
\item{\code{transformData(X)}}{Transform a data matrix as defined within the
  factory. The argument has to be a matrix with one column.}
\item{\code{summarizeFactory()}}{Summarize the base-learner factory object.}
}
}

\examples{
# Sample data:
data_mat = cbind(1:10)
y = sin(1:10)

# Create new data object:
data_source = InMemoryData$new(data_mat, "my_data_name")
data_target = InMemoryData$new()

# Create new linear base-learner:
spline_factory = BaselearnerPSpline$new(data_source, data_target,
  list(degree = 3, n_knots = 4, penalty = 2, differences = 2))

# Get the transformed data:
spline_factory$getData()

# Summarize factory:
spline_factory$summarizeFactory()

# Transform data manually:
spline_factory$transformData(data_mat)

}
