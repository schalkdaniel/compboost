% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{BaselearnerCategoricalBinary}
\alias{BaselearnerCategoricalBinary}
\title{Base learner to encode one single class of a categorical feature}
\format{
\link{S4} object.
}
\arguments{
\item{data_source}{\link{CategoricalDataRaw}\cr
The raw data object. Must be an object generated by \link{CategoricalDataRaw}.}

\item{class_name}{(\code{character(1)})\cr
The class for which a binary vector is created as data representation.}

\item{blearner_type}{(\code{character(1)}) \cr
Type of the base learner (if not specified, \code{blearner_type = "binary"} is used).
The unique id of the base learner is defined by appending \code{blearner_type} to
the feature name: \code{paste0(data_source$getIdentifier(), "_", class_name, "_", blearner_type)}.}
}
\description{
This class create a one-column one-hot encoded data matrix with ones at
\code{x == class_name} and zero otherwise.
}
\section{Usage}{

\preformatted{
BaselearnerCategoricalBinary$new(data_source, class_name)
BaselearnerCategoricalBinary$new(data_source, class_name, blearner_type)
}
}

\section{Fields}{

This class doesn't contain public fields.
}

\section{Methods}{

\itemize{
\item \verb{$summarizeFactory()}: \verb{() -> ()}
\item \verb{$transfromData(newdata)}: \code{list(InMemoryData) -> matrix()}
\item \verb{$getMeta()}: \verb{() -> list()}
}
}

\section{Inherited methods from Baselearner}{

\itemize{
\item \verb{$getData()}: \verb{() -> matrix()}
\item \verb{$getDF()}: \verb{() -> integer()}
\item \verb{$getPenalty()}: \verb{() -> numeric()}
\item \verb{$getPenaltyMat()}: \verb{() -> matrix()}
\item \verb{$getFeatureName()}: \verb{() -> character()}
\item \verb{$getModelName()}: \verb{() -> character()}
\item \verb{$getBaselearnerId()}: \verb{() -> character()}
}
}

\examples{
# Sample data:
x = sample(c("one","two"), 20, TRUE)
y = c(one = 0.8, two = -1.2)[x] + rnorm(20, 0, 0.2)
dat = data.frame(x, y)

# S4 API:
ds = CategoricalDataRaw$new(x, "cat")
bl = BaselearnerCategoricalBinary$new(ds, "one")

bl$getData()
bl$summarizeFactory()
bl$transformData(list(ds))
bl$getBaselearnerId()

# R6 API:
cboost = Compboost$new(dat, "y")
cboost$addBaselearner("x", "binary", BaselearnerCategoricalBinary)
cboost$train(500, 0)
table(cboost$getSelectedBaselearner())
plotPEUni(cboost, "x", individual = FALSE)
}
