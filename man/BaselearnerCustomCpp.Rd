% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{BaselearnerCustomCpp}
\alias{BaselearnerCustomCpp}
\title{Custom base learner using \verb{C++} functions.}
\format{
\link{S4} object.
}
\arguments{
\item{data_source}{(\link{InMemoryData})\cr
Uninitialized data object used to store the meta data. Note: At the moment, just in memory
storing is supported, see \code{?InMemorydata} for details.}

\item{instantiate_ptr}{(\code{externalptr})\cr
External pointer to the \verb{C++} instantiate data function.}

\item{train_ptr}{(\code{externalptr})\cr
External pointer to the \verb{C++} train function.}

\item{predict_ptr}{(\code{externalptr})\cr
External pointer to the \verb{C++} predict function.}
}
\description{
This class defines a custom base learner factory by
passing pointers to \verb{C++} functions for instantiation,
fitting, and predicting.
}
\section{Usage}{

\preformatted{
BaselearnerCustomCpp$new(data_source, list(instantiate_ptr, train_ptr, predict_ptr))
}
}

\section{Details}{

For an example see the extending compboost vignette or the function
\code{\link[=getCustomCppExample]{getCustomCppExample()}}.
}

\section{Fields}{

This class doesn't contain public fields.
}

\section{Methods}{

\itemize{
\item \verb{$summarizeFactory()}: \verb{() -> ()}
\item \verb{$transfromData(newdata)}: \code{list(InMemoryData) -> matrix()}
\item \verb{$getMeta()}: \verb{() -> list()}
}
}

\section{Inherited methods from Baselearner}{

\itemize{
\item \verb{$getData()}: \verb{() -> matrix()}
\item \verb{$getDF()}: \verb{() -> integer()}
\item \verb{$getPenalty()}: \verb{() -> numeric()}
\item \verb{$getPenaltyMat()}: \verb{() -> matrix()}
\item \verb{$getFeatureName()}: \verb{() -> character()}
\item \verb{$getModelName()}: \verb{() -> character()}
\item \verb{$getBaselearnerId()}: \verb{() -> character()}
}
}

\examples{
\dontrun{
# Sample data:
data_mat = cbind(1, 1:10)
y = 2 + 3 * 1:10

# Create new data object:
data_source = InMemoryData$new(data_mat, "my_data_name")

# Source the external pointer exposed by using XPtr:
Rcpp::sourceCpp(code = getCustomCppExample(silent = TRUE))

# Create new linear base learner:
custom_cpp_factory = BaselearnerCustomCpp$new(data_source,
  list(instantiate_ptr = dataFunSetter(), train_ptr = trainFunSetter(),
    predict_ptr = predictFunSetter()))

# Get the transformed data:
custom_cpp_factory$getData()

# Summarize factory:
custom_cpp_factory$summarizeFactory()
}
}
