% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{BaselearnerCentered}
\alias{BaselearnerCentered}
\title{Centering a base learner by another one}
\format{
\link{S4} object.
}
\description{
This base learner subtracts the effect of two base learners (usually defined
on the same feature). By subtracting the effects, one is not able to predict
the other one. This becomes handy for decomposing effects into, e.g., a
linear and non-linear component in which the non-linear component
is not capable to capture the linear part and hence is selected after
the linear effect is estimated.
}
\section{Fields}{

This class doesn't contain public fields.
}

\section{Methods}{

\itemize{
\item \verb{$summarizeFactory()}: \verb{() -> ()}
\item \verb{$transfromData(newdata)}: \code{list(InMemoryData) -> matrix()}
\item \verb{$getMeta()}: \verb{() -> list()}
\item \verb{$getRotation()}: \verb{() -> matrix()}
}
}

\section{Inherited methods from Baselearner}{

\itemize{
\item \verb{$getData()}: \verb{() -> matrix()}
\item \verb{$getDF()}: \verb{() -> integer()}
\item \verb{$getPenalty()}: \verb{() -> numeric()}
\item \verb{$getPenaltyMat()}: \verb{() -> matrix()}
\item \verb{$getFeatureName()}: \verb{() -> character()}
\item \verb{$getModelName()}: \verb{() -> character()}
\item \verb{$getBaselearnerId()}: \verb{() -> character()}
}
}

\examples{
# Sample data:
x = runif(100, 0, 10)
y = 2 * sin(x) + 2 * x + rnorm(100, 0, 0.5)
dat = data.frame(x, y)

# S4 wrapper

# Create new data object, a matrix is required as input:
data_mat = cbind(x)
data_source = InMemoryData$new(data_mat, "x")

# Prerequisite: Create a linear and spline base learner:
bl_lin = BaselearnerPolynomial$new(data_source,
  list(degree = 1, intercept = TRUE))
bl_sp = BaselearnerPSpline$new(data_source,
  list(n_knots = 15, df = 5))

# Now, subtract the linear effect from the spline:
bl_ctr = BaselearnerCentered$new(bl_sp, bl_lin, "ctr")

# Recognize, that the data matrix of this base learner has
# `nrow(bl_sp$getData()) - ncol(bl_lin$getData())` columns:
dim(bl_ctr$getData())
str(bl_ctr$getMeta())

# The data matrix is created by rotating the spline data matrix:
all.equal(t(bl_sp$getData()) \%*\% bl_ctr$getRotation(), bl_ctr$getData())

# Transform "new data". Internally, the basis of the spline is build and
# then rotated by the rotation matrix to subtract the linear part:
newdata = list(InMemoryData$new(cbind(rnorm(5)), "x"))
bl_ctr$transformData(newdata)

# R6 wrapper

# Compboost has a wrapper called `$addComponents()` that automatically
cboost = Compboost$new(dat, "y")

# creates and adds the linear base learner and a centered base learner
# as above (the `...` args are passed to `BaselearnerPSpline$new():
cboost$addComponents("x", n_knots = 10, df = 5, bin_root = 2)

# Note that we have used binning to save memory, hence the data matrix
# is reduced to 10 observations:
dim(cboost$baselearner_list$x_x_spline_centered$factory$getData())

cboost$train(200, 0)

library(ggplot2)

plotPEUni(cboost, "x") +
  geom_point(data = dat, aes(x = x, y = y - c(cboost$offset)), alpha = 0.2)
}
